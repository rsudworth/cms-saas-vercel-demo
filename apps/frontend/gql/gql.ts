/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "fragment ContentLink on ContentModelReference {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment ContentLinkSearch on ContentModelReferenceSearch {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment IContentData on IContent {\n  contentType: ContentType\n  id: ContentLink {\n    ...ContentLink\n  }\n  locale: Language {\n    name: Name\n  }\n  path: RelativePath\n}\n\nfragment ContentAreaItemData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...BlockData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemData on ContentAreaItemModel {\n  item: ContentLink {\n    ...ContentLink\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment LinkItemData on LinkItemNode {\n  children: Text\n  title: Title\n  href: Href\n  target: Target\n  content: ContentLink {\n    href: Url\n    data: Expanded {\n      path: RelativePath\n    }\n  }\n}\n\nfragment ImageData on ContentModelReference {\n  ...ContentLink\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment ImageDataSearch on ContentModelReferenceSearch {\n  ...ContentLinkSearch\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment BlockData on IContent {\n  ...IContentData\n}\n\nfragment PageData on IContent {\n  ...IContentData\n}\n\nfragment ContentAreaItemBase on ContentAreaItemModelSearch {\n  contentLink: ContentLink {\n    id: Id\n    workId: WorkId\n    guidValue: GuidValue\n    component: Expanded {\n      path: RelativePath\n      type: ContentType\n    }\n  }\n  displayOption: DisplayOption\n}\n\nquery getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n  Content(\n    where: {ContentLink: {Id: {eq: $id}, WorkId: {eq: $workId}, GuidValue: {eq: $guidValue}}, IsCommonDraft: {eq: $isCommonDraft}}\n    locale: $locale\n  ) {\n    total\n    items {\n      ...IContentData\n      ...PageData\n      ...BlockData\n    }\n  }\n}\n\nquery getContentByPath($path: String!, $locale: [Locales], $siteId: String) {\n  Content(\n    where: {RelativePath: {eq: $path}, SiteId: {eq: $siteId}}\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}\n\nquery getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales]) {\n  Content(\n    where: {ContentLink: {GuidValue: {eq: $guidValue}, Id: {eq: $id}, WorkId: {eq: $workId}}}\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n      ContentType\n    }\n    total\n  }\n}": types.ContentLinkFragmentDoc,
    "query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }": types.GetPathByGuidDocument,
    "query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _or: [\n                { _fulltext: { contains: $term } }\n                { _fulltext: { contains: $topInterest, boost: 2 } }\n            ]\n            _fulltext: { contains: $term }\n            Url: { exist: true }\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}": types.ContentSearchDocument,
    "fragment BlogListingBlockData on BlogListingBlock {\n  Name\n  showFilters: BlogListingShowFilters\n  selectedPageSize: BlogListingItemCount\n}": types.BlogListingBlockDataFragmentDoc,
    "fragment CardBlockData on CardBlock {\n  Name\n  button: CardButton {\n    className: ButtonClass\n    children: ButtonText\n    buttonType: ButtonType\n    url: ButtonUrl\n    buttonVariant: ButtonVariant\n  }\n  color: CardColor\n  description: CardDescription\n  heading: CardHeading\n  icon: CardIcon {\n    src: Url\n  }\n  image: CardImage {\n    src: Url\n  }\n  subheading:CardSubHeading\n  imageLayout: ImageLayout\n}": types.CardBlockDataFragmentDoc,
    "fragment CarouselBlockData on CarouselBlock {\n    CarouselItemsContentArea {\n        ...BlockContentAreaItemSearchData\n    }\n}": types.CarouselBlockDataFragmentDoc,
    "\n    fragment LayoutContainerBlockData on LayoutContainerBlock {\n    Name\n    columns: ColumnsCount\n    color: ContainerBackgroundColor\n    backgroundImage: ContainerBackgroundImage {\n      url: Url\n    }\n    marginBottom: ContainerMarginBottom\n    marginTop: ContainerMarginTop\n    paddingBottom: ContainerPaddingBottom\n    paddingTop: ContainerPaddingTop\n    gap: GapSize\n    LayoutContentArea {\n      item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n      }\n      displayOption:DisplayOption\n    }\n  }\n  ": types.LayoutContainerBlockDataFragmentDoc,
    "fragment HomeHeroBlockData on HomePageHeroBlock\n{\n    Name\n    heading: HomeHeroBlockHeading\n    subheading: HomeHeroBlockSubHeading\n    button: HomeHeroButtonBlock {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n    }\n  \tleftImage:HomeHeroLeftImage{\n      url: Url\n      GuidValue\n      Id\n    }\n    rightImage:HomeHeroRightImage{\n      url: Url\n      GuidValue\n      Id\n    }\n}": types.HomeHeroBlockDataFragmentDoc,
    "\n    fragment HeroBlockData on HeroBlock {\n      Name\n      heading: Heading\n      subheading: SubHeading\n      button: HeroButton {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n      }\n      color: HeroColor\n      description: Description\n      eyebrow: Eyebrow\n      image: HeroImage {\n        src: Url\n        GuidValue\n        Id\n      }\n    }\n  ": types.HeroBlockDataFragmentDoc,
    "\n  fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n  }\n": types.OdpEmbedBlockDataFragmentDoc,
    "\n    fragment QuoteBlockData on QuoteBlock {\n      quote: QuoteText\n      color: QuoteColor\n      active: QuoteActive\n      name: QuoteProfileName\n      profilePicture: QuoteProfilePicture {\n        url: Url\n      }\n      location: QuoteProfileLocation\n    }\n  ": types.QuoteBlockDataFragmentDoc,
    "\n    fragment TextBlockData on TextBlock {\n      Name\n      overline: TextBlockOverline\n      headingSize: TextBlockHeadingSize\n      heading: TextBlockHeading\n      description: TextBlockDescription\n      center: TextCenter\n      width: TextBlockWidth\n      className: TextClassName\n    }\n  ": types.TextBlockDataFragmentDoc,
    "\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n    __typename\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n": types.FooterNavigationNewDocument,
    "\n  query Navigations($locale: [Locales]) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n    __typename\n  }\n": types.NavigationsDocument,
    "\n  fragment BlogPostPageData on BlogPostPage {\n    Name\n    title: Heading\n    subtitle: ArticleSubHeading\n    image: BlogPostPromoImage {\n      src: Url\n    }\n    description: BlogPostBody\n    publish: StartPublish\n    author: ArticleAuthor\n  }\n": types.BlogPostPageDataFragmentDoc,
    "\n  fragment LandingPageData on LandingPage {\n    TopContentArea {\n      ...ContentAreaItemData\n    }\n    MainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n": types.LandingPageDataFragmentDoc,
    "\n  fragment StandardPageData on StandardPage {\n    Name\n    title: StandardPageHeading\n    subtitle: StandardSubHeading\n    image: StandardPromoImage {\n      src: Url\n    }\n    description: MainBody\n  }\n": types.StandardPageDataFragmentDoc,
    "\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n": types.StartPageDataFragmentDoc,
    "query GetArticles( $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: BlogPostPage(\n      where: {\n        _and: [\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Heading\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: BlogPostPromoImage {\n          src: Url\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }": types.GetArticlesDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentLink on ContentModelReference {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment ContentLinkSearch on ContentModelReferenceSearch {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment IContentData on IContent {\n  contentType: ContentType\n  id: ContentLink {\n    ...ContentLink\n  }\n  locale: Language {\n    name: Name\n  }\n  path: RelativePath\n}\n\nfragment ContentAreaItemData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...BlockData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemData on ContentAreaItemModel {\n  item: ContentLink {\n    ...ContentLink\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment LinkItemData on LinkItemNode {\n  children: Text\n  title: Title\n  href: Href\n  target: Target\n  content: ContentLink {\n    href: Url\n    data: Expanded {\n      path: RelativePath\n    }\n  }\n}\n\nfragment ImageData on ContentModelReference {\n  ...ContentLink\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment ImageDataSearch on ContentModelReferenceSearch {\n  ...ContentLinkSearch\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment BlockData on IContent {\n  ...IContentData\n}\n\nfragment PageData on IContent {\n  ...IContentData\n}\n\nfragment ContentAreaItemBase on ContentAreaItemModelSearch {\n  contentLink: ContentLink {\n    id: Id\n    workId: WorkId\n    guidValue: GuidValue\n    component: Expanded {\n      path: RelativePath\n      type: ContentType\n    }\n  }\n  displayOption: DisplayOption\n}\n\nquery getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n  Content(\n    where: {ContentLink: {Id: {eq: $id}, WorkId: {eq: $workId}, GuidValue: {eq: $guidValue}}, IsCommonDraft: {eq: $isCommonDraft}}\n    locale: $locale\n  ) {\n    total\n    items {\n      ...IContentData\n      ...PageData\n      ...BlockData\n    }\n  }\n}\n\nquery getContentByPath($path: String!, $locale: [Locales], $siteId: String) {\n  Content(\n    where: {RelativePath: {eq: $path}, SiteId: {eq: $siteId}}\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}\n\nquery getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales]) {\n  Content(\n    where: {ContentLink: {GuidValue: {eq: $guidValue}, Id: {eq: $id}, WorkId: {eq: $workId}}}\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n      ContentType\n    }\n    total\n  }\n}"): (typeof documents)["fragment ContentLink on ContentModelReference {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment ContentLinkSearch on ContentModelReferenceSearch {\n  id: Id\n  workId: WorkId\n  guidValue: GuidValue\n}\n\nfragment IContentData on IContent {\n  contentType: ContentType\n  id: ContentLink {\n    ...ContentLink\n  }\n  locale: Language {\n    name: Name\n  }\n  path: RelativePath\n}\n\nfragment ContentAreaItemData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...BlockData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n  item: ContentLink {\n    ...ContentLinkSearch\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment BlockContentAreaItemData on ContentAreaItemModel {\n  item: ContentLink {\n    ...ContentLink\n    data: Expanded {\n      ...IContentData\n    }\n  }\n  displayOption: DisplayOption\n}\n\nfragment LinkItemData on LinkItemNode {\n  children: Text\n  title: Title\n  href: Href\n  target: Target\n  content: ContentLink {\n    href: Url\n    data: Expanded {\n      path: RelativePath\n    }\n  }\n}\n\nfragment ImageData on ContentModelReference {\n  ...ContentLink\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment ImageDataSearch on ContentModelReferenceSearch {\n  ...ContentLinkSearch\n  url: Url\n  data: Expanded {\n    ...IContentData\n    url: Url\n    alt: Name\n    path: RelativePath\n  }\n}\n\nfragment BlockData on IContent {\n  ...IContentData\n}\n\nfragment PageData on IContent {\n  ...IContentData\n}\n\nfragment ContentAreaItemBase on ContentAreaItemModelSearch {\n  contentLink: ContentLink {\n    id: Id\n    workId: WorkId\n    guidValue: GuidValue\n    component: Expanded {\n      path: RelativePath\n      type: ContentType\n    }\n  }\n  displayOption: DisplayOption\n}\n\nquery getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n  Content(\n    where: {ContentLink: {Id: {eq: $id}, WorkId: {eq: $workId}, GuidValue: {eq: $guidValue}}, IsCommonDraft: {eq: $isCommonDraft}}\n    locale: $locale\n  ) {\n    total\n    items {\n      ...IContentData\n      ...PageData\n      ...BlockData\n    }\n  }\n}\n\nquery getContentByPath($path: String!, $locale: [Locales], $siteId: String) {\n  Content(\n    where: {RelativePath: {eq: $path}, SiteId: {eq: $siteId}}\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}\n\nquery getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales]) {\n  Content(\n    where: {ContentLink: {GuidValue: {eq: $guidValue}, Id: {eq: $id}, WorkId: {eq: $workId}}}\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n      ContentType\n    }\n    total\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }"): (typeof documents)["query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _or: [\n                { _fulltext: { contains: $term } }\n                { _fulltext: { contains: $topInterest, boost: 2 } }\n            ]\n            _fulltext: { contains: $term }\n            Url: { exist: true }\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}"): (typeof documents)["query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _or: [\n                { _fulltext: { contains: $term } }\n                { _fulltext: { contains: $topInterest, boost: 2 } }\n            ]\n            _fulltext: { contains: $term }\n            Url: { exist: true }\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlogListingBlockData on BlogListingBlock {\n  Name\n  showFilters: BlogListingShowFilters\n  selectedPageSize: BlogListingItemCount\n}"): (typeof documents)["fragment BlogListingBlockData on BlogListingBlock {\n  Name\n  showFilters: BlogListingShowFilters\n  selectedPageSize: BlogListingItemCount\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment CardBlockData on CardBlock {\n  Name\n  button: CardButton {\n    className: ButtonClass\n    children: ButtonText\n    buttonType: ButtonType\n    url: ButtonUrl\n    buttonVariant: ButtonVariant\n  }\n  color: CardColor\n  description: CardDescription\n  heading: CardHeading\n  icon: CardIcon {\n    src: Url\n  }\n  image: CardImage {\n    src: Url\n  }\n  subheading:CardSubHeading\n  imageLayout: ImageLayout\n}"): (typeof documents)["fragment CardBlockData on CardBlock {\n  Name\n  button: CardButton {\n    className: ButtonClass\n    children: ButtonText\n    buttonType: ButtonType\n    url: ButtonUrl\n    buttonVariant: ButtonVariant\n  }\n  color: CardColor\n  description: CardDescription\n  heading: CardHeading\n  icon: CardIcon {\n    src: Url\n  }\n  image: CardImage {\n    src: Url\n  }\n  subheading:CardSubHeading\n  imageLayout: ImageLayout\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment CarouselBlockData on CarouselBlock {\n    CarouselItemsContentArea {\n        ...BlockContentAreaItemSearchData\n    }\n}"): (typeof documents)["fragment CarouselBlockData on CarouselBlock {\n    CarouselItemsContentArea {\n        ...BlockContentAreaItemSearchData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment LayoutContainerBlockData on LayoutContainerBlock {\n    Name\n    columns: ColumnsCount\n    color: ContainerBackgroundColor\n    backgroundImage: ContainerBackgroundImage {\n      url: Url\n    }\n    marginBottom: ContainerMarginBottom\n    marginTop: ContainerMarginTop\n    paddingBottom: ContainerPaddingBottom\n    paddingTop: ContainerPaddingTop\n    gap: GapSize\n    LayoutContentArea {\n      item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n      }\n      displayOption:DisplayOption\n    }\n  }\n  "): (typeof documents)["\n    fragment LayoutContainerBlockData on LayoutContainerBlock {\n    Name\n    columns: ColumnsCount\n    color: ContainerBackgroundColor\n    backgroundImage: ContainerBackgroundImage {\n      url: Url\n    }\n    marginBottom: ContainerMarginBottom\n    marginTop: ContainerMarginTop\n    paddingBottom: ContainerPaddingBottom\n    paddingTop: ContainerPaddingTop\n    gap: GapSize\n    LayoutContentArea {\n      item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n      }\n      displayOption:DisplayOption\n    }\n  }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment HomeHeroBlockData on HomePageHeroBlock\n{\n    Name\n    heading: HomeHeroBlockHeading\n    subheading: HomeHeroBlockSubHeading\n    button: HomeHeroButtonBlock {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n    }\n  \tleftImage:HomeHeroLeftImage{\n      url: Url\n      GuidValue\n      Id\n    }\n    rightImage:HomeHeroRightImage{\n      url: Url\n      GuidValue\n      Id\n    }\n}"): (typeof documents)["fragment HomeHeroBlockData on HomePageHeroBlock\n{\n    Name\n    heading: HomeHeroBlockHeading\n    subheading: HomeHeroBlockSubHeading\n    button: HomeHeroButtonBlock {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n    }\n  \tleftImage:HomeHeroLeftImage{\n      url: Url\n      GuidValue\n      Id\n    }\n    rightImage:HomeHeroRightImage{\n      url: Url\n      GuidValue\n      Id\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment HeroBlockData on HeroBlock {\n      Name\n      heading: Heading\n      subheading: SubHeading\n      button: HeroButton {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n      }\n      color: HeroColor\n      description: Description\n      eyebrow: Eyebrow\n      image: HeroImage {\n        src: Url\n        GuidValue\n        Id\n      }\n    }\n  "): (typeof documents)["\n    fragment HeroBlockData on HeroBlock {\n      Name\n      heading: Heading\n      subheading: SubHeading\n      button: HeroButton {\n        className: ButtonClass\n        children: ButtonText\n        buttonType: ButtonType\n        url: ButtonUrl\n        buttonVariant: ButtonVariant\n      }\n      color: HeroColor\n      description: Description\n      eyebrow: Eyebrow\n      image: HeroImage {\n        src: Url\n        GuidValue\n        Id\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n  }\n"): (typeof documents)["\n  fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment QuoteBlockData on QuoteBlock {\n      quote: QuoteText\n      color: QuoteColor\n      active: QuoteActive\n      name: QuoteProfileName\n      profilePicture: QuoteProfilePicture {\n        url: Url\n      }\n      location: QuoteProfileLocation\n    }\n  "): (typeof documents)["\n    fragment QuoteBlockData on QuoteBlock {\n      quote: QuoteText\n      color: QuoteColor\n      active: QuoteActive\n      name: QuoteProfileName\n      profilePicture: QuoteProfilePicture {\n        url: Url\n      }\n      location: QuoteProfileLocation\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    fragment TextBlockData on TextBlock {\n      Name\n      overline: TextBlockOverline\n      headingSize: TextBlockHeadingSize\n      heading: TextBlockHeading\n      description: TextBlockDescription\n      center: TextCenter\n      width: TextBlockWidth\n      className: TextClassName\n    }\n  "): (typeof documents)["\n    fragment TextBlockData on TextBlock {\n      Name\n      overline: TextBlockOverline\n      headingSize: TextBlockHeadingSize\n      heading: TextBlockHeading\n      description: TextBlockDescription\n      center: TextCenter\n      width: TextBlockWidth\n      className: TextClassName\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n    __typename\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n"): (typeof documents)["\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n    __typename\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Navigations($locale: [Locales]) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n    __typename\n  }\n"): (typeof documents)["\n  query Navigations($locale: [Locales]) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n    __typename\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n    __typename\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment BlogPostPageData on BlogPostPage {\n    Name\n    title: Heading\n    subtitle: ArticleSubHeading\n    image: BlogPostPromoImage {\n      src: Url\n    }\n    description: BlogPostBody\n    publish: StartPublish\n    author: ArticleAuthor\n  }\n"): (typeof documents)["\n  fragment BlogPostPageData on BlogPostPage {\n    Name\n    title: Heading\n    subtitle: ArticleSubHeading\n    image: BlogPostPromoImage {\n      src: Url\n    }\n    description: BlogPostBody\n    publish: StartPublish\n    author: ArticleAuthor\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment LandingPageData on LandingPage {\n    TopContentArea {\n      ...ContentAreaItemData\n    }\n    MainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"): (typeof documents)["\n  fragment LandingPageData on LandingPage {\n    TopContentArea {\n      ...ContentAreaItemData\n    }\n    MainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StandardPageData on StandardPage {\n    Name\n    title: StandardPageHeading\n    subtitle: StandardSubHeading\n    image: StandardPromoImage {\n      src: Url\n    }\n    description: MainBody\n  }\n"): (typeof documents)["\n  fragment StandardPageData on StandardPage {\n    Name\n    title: StandardPageHeading\n    subtitle: StandardSubHeading\n    image: StandardPromoImage {\n      src: Url\n    }\n    description: MainBody\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"): (typeof documents)["\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticles( $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: BlogPostPage(\n      where: {\n        _and: [\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Heading\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: BlogPostPromoImage {\n          src: Url\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }"): (typeof documents)["query GetArticles( $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: BlogPostPage(\n      where: {\n        _and: [\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Heading\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: BlogPostPromoImage {\n          src: Url\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;