/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}": types.GetGenericMetaDataDocument,
    "query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }": types.GetPathByGuidDocument,
    "query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _and: [\n                { _fulltext: { contains: $term, boost: 25 } }\n                { _fulltext: { contains: $topInterest, boost: 5 } }\n                { Url: { exist: true } }\n            ]\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}": types.ContentSearchDocument,
    "fragment ButtonBlockData on ButtonBlock {\n  ButtonLink {\n    Href\n    Title\n    Target\n    Text\n  }\n}": types.ButtonBlockDataFragmentDoc,
    "query getButtonBlockData($id: Int, $workId: Int, $guidValue: String, $lang: [Locales])\n{\n  ButtonBlock(\n    where: {\n      _or: [{\n        ContentLink: {\n          GuidValue: {\n            eq: $guidValue\n          }\n        }\n      },{\n        ContentLink: {\n          Id: {\n            eq: $id\n          },\n          WorkId: {\n            eq: $workId\n          }\n        }\n      }]\n    },\n    locale: $lang\n  ) {\n    items {\n      ButtonLink {\n        Href\n        Title\n        Target\n        Text\n      }\n  \t}\n  }\n}": types.GetButtonBlockDataDocument,
    "fragment CardBlockData on CardBlock {\n    Title\n    Description\n    Image {\n        Url\n        Expanded {\n            Name\n            Path: RelativePath\n        }\n    }\n    Button: Link {\n        ...LinkItemData\n    }\n}": types.CardBlockDataFragmentDoc,
    "fragment CarouselBlockData on CarouselBlock {\n    CarouselSlides {\n        ...BlockContentAreaItemData\n    }\n    ShowArrows\n}": types.CarouselBlockDataFragmentDoc,
    "fragment ContainerBlockData on ContainerBlock {\n    MainContainerArea {\n        ...BlockContentAreaItemData\n    }\n    Gap\n    Spacing\n    GridLayout\n    BackgroundColor\n}": types.ContainerBlockDataFragmentDoc,
    "fragment HeroBlockData on HeroBlock\n{\n    Name\n    Background\n    BannerTitle\n    BannerText\n    CalloutOpacity\n    BannerLink {\n        ...LinkItemData\n    }\n}": types.HeroBlockDataFragmentDoc,
    "fragment HighlightBlockData on HighlightTextBlock\n{\n  Title\n  PayOffText\n}": types.HighlightBlockDataFragmentDoc,
    "fragment ImageMediaData on Content {\n    RelativePath \n}": types.ImageMediaDataFragmentDoc,
    "fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n}": types.OdpEmbedBlockDataFragmentDoc,
    "query getProductProps($code: String!, $locale: [Locales])\n{\n    product: Product(\n        where: { ProductCode: { eq: $code }}\n        locale: $locale\n    ) {\n        total\n        items {\n            code: ProductCode\n            properties: _children {\n                texts: ProductTextProperty {\n                    items {\n                        label: PropertyName\n                        value: PropertyValue\n                    }\n                }\n            }\n        }\n    }\n}": types.GetProductPropsDocument,
    "fragment ProductBlockData on Product {\n    ProductCode\n    ProductName\n    ProductTagLine\n    ShortDescription\n    MainImage {\n        ...ImageData\n    }\n}": types.ProductBlockDataFragmentDoc,
    "fragment QuoteData on QuoteBlock {\n    Text\n    Quotee\n    Role\n    QuoteeLocation\n    Photo {\n        ...ImageData\n    }\n}": types.QuoteDataFragmentDoc,
    "fragment TextBlockData on TextBlock {\n    Spacing\n    MainBody\n}": types.TextBlockDataFragmentDoc,
    "query getFooter($channelId: String!, $locale: [Locales!]) {\n    FooterConfigBlock (\n        where: { FooterChannelID: { eq: $channelId } }, \n        locale: $locale,\n        limit: 1\n    ) {\n        total\n        items {\n            logo: FooterLogo\n            text: FooterText\n            button: BrandButton { ...FooterLinkData }\n            firstLinks: FooterLinkGroup1 { ...FooterLinks }\n            secondLinks: FooterLinkGroup2 { ...FooterLinks }\n            thirdLinks: FooterLinkGroup3 { ...FooterLinks }\n            fourthLinks: FooterLinkGroup4 { ...FooterLinks }\n        }\n    }\n}": types.GetFooterDocument,
    "fragment FooterLinks on FooterConfigBlockBlockData {\n    caption:LinkListCaption\n    items: LinkListItems { ...FooterLinkData }\n}": types.FooterLinksFragmentDoc,
    "fragment FooterLinkData on LinkItemNode {\n    href: Href\n    children: Text\n    title: Title\n    target: Target\n    content: ContentLink {\n        url: Url\n        data: Expanded {\n            path: RelativePath\n        }\n    }\n}": types.FooterLinkDataFragmentDoc,
    "query GetHeaderData($siteId: String!, $locale: [Locales]) {\n    HeaderConfigBlock(where: { ChannelId: { eq: $siteId } }, locale: $locale) {\n        items {\n            Name\n            SiteLogo\n            ChannelId\n            CustomCSS\n            PromoText\n            NavMenuArea {\n            DisplayOption\n                ContentLink {\n                    Expanded {\n                        ...NavMenuItemData\n                    }\n                }\n            }\n        }\n      }\n}\n  \nfragment NavMenuItemData on NavMenuItem {\n    Name\n    Label\n    Links {\n        Href\n        Text\n        Title\n        Target\n        ContentLink {\n            Url\n            Language {\n                Name\n            }\n            Expanded {\n                RelativePath\n            }\n        }\n    }\n    MenuContent {\n        item: ContentLink {\n            id: Id\n            workId: WorkId\n            guidValue: GuidValue\n            data: Expanded {\n                contentType: ContentType\n                id: ContentLink {\n                    id: Id\n                    workId: WorkId\n                    guidValue: GuidValue\n                }\n                locale: Language {\n                    name: Name\n                }\n                path: RelativePath\n            }\n        }\n        displayOption: DisplayOption\n    }\n    lastLink: NavItemBottomLink {\n        href: Href\n        title: Title\n        target: Target\n        text: Text\n        item: ContentLink {\n            url: Url,\n            data: Expanded {\n                path: RelativePath\n            }\n        }\n    }\n}": types.GetHeaderDataDocument,
    "fragment ArticleListPageData on ArticleListPage {\n    Name\n    ArticleListTitle\n    ArticleListBody\n    ArticleListHero {\n        ...ContentAreaItemData\n    }\n}": types.ArticleListPageDataFragmentDoc,
    "query getArticleListMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getArticleListMetaData: ArticleListPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: SeoSettings {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}": types.GetArticleListMetaDataDocument,
    "fragment ArticlePageBlockData on ArticlePage\n{\n    href: RelativePath\n    name: Name\n    title: Title\n    author: ArticleAuthor\n    published: StartPublish\n    image: PageImage {\n        src: Url\n        data: Expanded {\n            alt: Name\n        }\n    }\n    meta: SeoSettings {\n        intro:MetaDescription\n    }\n}": types.ArticlePageBlockDataFragmentDoc,
    "fragment ArticlePageData on ArticlePage {\n    Title\n    MainBody\n    StartPublish\n    ArticleAuthor\n    PageImage {\n        ...ImageData\n    }\n    SeoSettings {\n        MetaDescription\n    }\n}": types.ArticlePageDataFragmentDoc,
    "query GetArticlePageMetaData ($guid:String!, $locale: [Locales]!) {\n    ArticlePage (\n        where: { ContentLink: { GuidValue: { eq: $guid }}}\n        locale: $locale\n    ) {\n        items {\n            name: Name\n            title: Title\n            published: StartPublish\n            modified: Changed\n            expires: StopPublish\n            url: Url\n            locale:Language {\n                code:Name\n            }\n            alternateLocales: ExistingLanguages {\n                code: Name\n                url: Link\n            }\n            seo: SeoSettings {\n                metaTitle: MetaTitle\n                metaDescription: MetaDescription\n                type: GraphType\n                image: SharingImage {\n                    id: Id\n                    guidValue: GuidValue\n                    data: Expanded {\n                        url:Url\n                        path: RelativePath\n                    }\n                }\n            }\n        }\n    }\n}": types.GetArticlePageMetaDataDocument,
    "fragment LandingPageData on LandingPage {\n    TopContentArea {\n        ...ContentAreaItemData\n    }\n    MainContentArea {\n        ...ContentAreaItemData\n    }\n}": types.LandingPageDataFragmentDoc,
    "query getLandingPageMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getLandingPageMetaData: LandingPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: LandingPageSeo {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}": types.GetLandingPageMetaDataDocument,
    "fragment LocationListPageData on LocationListPage {\n    LocationListTitle\n    LocationsIntroduction\n    LocationsImage {\n        ...ImageDataSearch\n    }\n    LocationsTopArea {\n        ...ContentAreaItemData\n    }\n    LocationsMainContent {\n        ...ContentAreaItemData\n    }\n}": types.LocationListPageDataFragmentDoc,
    "fragment LocationPageData on LocationPage {\n    ParentLink {\n        Url\n        Expanded {\n            RelativePath\n        }\n    }\n    Name\n    LocationTitle\n    LocationServices\n    LocationStreet1\n    LocationStreet2\n    LocationPostalCode\n    LocationCity\n    LocationState\n    LocationCountry\n    LocationContinent\n    LocationPhone\n    LocationLatitude\n    LocationLongitude\n    LocationText\n    LocationImage {\n        ...ImageDataSearch\n    }\n}": types.LocationPageDataFragmentDoc,
    "query GetArticles($parent: String!, $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: ArticlePage(\n      where: {\n        _and: [\n          { ParentLink: { GuidValue: { eq: $parent } } }\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Title\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: PageImage {\n          url: Url\n          data: Expanded {\n            url: Url\n            path: RelativePath\n          }\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }": types.GetArticlesDocument,
    "fragment LocationTopContent on LocationPage {\n    isTopContent: LocationTopItem\n}": types.LocationTopContentFragmentDoc,
    "fragment LocationGeoLocation on LocationPage {\n    lon: LocationLongitude\n    lat: LocationLatitude\n}": types.LocationGeoLocationFragmentDoc,
    "query getLocationsList($parentId:String!, $locale: [Locales], $withGeoLocation: Boolean! = false, $withTopContent: Boolean! = false, $orderBy: LocationPageOrderByInput, $continents: [String!], $services: [String!]) {\n    getLocationsList: LocationPage (\n        where: {\n            ParentLink: { GuidValue: { eq: $parentId }}\n        }\n        locale: $locale\n        orderBy: $orderBy\n    ) {\n        facets {\n            continent: LocationContinent(orderType: VALUE, orderBy: ASC, filters: $continents) {\n                name\n                count\n            },\n            services: LocationServices(orderType: VALUE, orderBy: ASC, filters: $services) {\n                name\n                count\n            }\n        }\n        items {\n            id: ContentLink {\n                id: Id\n                guid:GuidValue\n            }\n            path: RelativePath\n            slug: RouteSegment\n            title: LocationTitle\n            street1: LocationStreet1\n            street2: LocationStreet2\n            city: LocationCity\n            postalCode: LocationPostalCode\n            state: LocationState\n            country: LocationCountry\n            continent: LocationContinent\n            services: LocationServices\n            ...LocationGeoLocation @include(if:$withGeoLocation)\n            ...LocationTopContent @include(if:$withTopContent)\n        }\n    }\n}": types.GetLocationsListDocument,
    "fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }": types.ContentLinkFragmentDoc,
    "fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }": types.ContentLinkSearchFragmentDoc,
    "fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }": types.IContentDataFragmentDoc,
    "fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }": types.ContentAreaItemDataFragmentDoc,
    "fragment BlockContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }": types.BlockContentAreaItemDataFragmentDoc,
    "fragment LinkItemData on LinkItemNode {\n      children: Text\n      title: Title\n      href: Href\n      target: Target\n      content: ContentLink {\n        href: Url\n        data: Expanded {\n          path: RelativePath\n        }\n      }\n    }": types.LinkItemDataFragmentDoc,
    "fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }": types.ImageDataFragmentDoc,
    "fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }": types.ImageDataSearchFragmentDoc,
    "fragment BlockData on IContent {\n        ...IContentData\n    }": types.BlockDataFragmentDoc,
    "fragment PageData on IContent {\n        ...IContentData\n    }": types.PageDataFragmentDoc,
    "fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }": types.ContentAreaItemBaseFragmentDoc,
    "query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}": types.GetContentByIdDocument,
    "query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}": types.GetContentByPathDocument,
    "query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}": types.GetContentTypeDocument,
    "query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetAllChannelsDocument,
    "query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetChannelByIdDocument,
    "query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetChannelByDomainDocument,
    "query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}": types.GetAllRoutesDocument,
    "query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }": types.GetRouteByPathDocument,
    "query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }": types.GetRouteByIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}"): (typeof documents)["query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }"): (typeof documents)["query getPathByGuid($guid: String!)\n                    {\n                    pathByGuid: Content (\n                        where: { ContentLink: { GuidValue: { eq: $guid } } }\n                    ) {\n                        items {\n                        path:RelativePath\n                        url:Url\n                        }\n                    }\n                    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _and: [\n                { _fulltext: { contains: $term, boost: 25 } }\n                { _fulltext: { contains: $topInterest, boost: 5 } }\n                { Url: { exist: true } }\n            ]\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}"): (typeof documents)["query ContentSearch($term: String!, $topInterest: String, $locale: [String!], $types: [String!], $pageSize:Int) {\n    Content(\n        where: {\n            _and: [\n                { _fulltext: { contains: $term, boost: 25 } }\n                { _fulltext: { contains: $topInterest, boost: 5 } }\n                { Url: { exist: true } }\n            ]\n        }\n        orderBy: { _ranking: SEMANTIC }\n        limit: $pageSize\n    ) {\n        total\n        cursor\n        items {\n            _score\n            name: Name\n            url: RelativePath\n            type: ContentType\n            changed: Changed\n            published: StartPublish\n        }\n        facets {\n            ContentType (filters: $types) {\n                name\n                count\n            }\n            Language {\n                Name (filters: $locale) {\n                    name\n                    count\n                }\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ButtonBlockData on ButtonBlock {\n  ButtonLink {\n    Href\n    Title\n    Target\n    Text\n  }\n}"): (typeof documents)["fragment ButtonBlockData on ButtonBlock {\n  ButtonLink {\n    Href\n    Title\n    Target\n    Text\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getButtonBlockData($id: Int, $workId: Int, $guidValue: String, $lang: [Locales])\n{\n  ButtonBlock(\n    where: {\n      _or: [{\n        ContentLink: {\n          GuidValue: {\n            eq: $guidValue\n          }\n        }\n      },{\n        ContentLink: {\n          Id: {\n            eq: $id\n          },\n          WorkId: {\n            eq: $workId\n          }\n        }\n      }]\n    },\n    locale: $lang\n  ) {\n    items {\n      ButtonLink {\n        Href\n        Title\n        Target\n        Text\n      }\n  \t}\n  }\n}"): (typeof documents)["query getButtonBlockData($id: Int, $workId: Int, $guidValue: String, $lang: [Locales])\n{\n  ButtonBlock(\n    where: {\n      _or: [{\n        ContentLink: {\n          GuidValue: {\n            eq: $guidValue\n          }\n        }\n      },{\n        ContentLink: {\n          Id: {\n            eq: $id\n          },\n          WorkId: {\n            eq: $workId\n          }\n        }\n      }]\n    },\n    locale: $lang\n  ) {\n    items {\n      ButtonLink {\n        Href\n        Title\n        Target\n        Text\n      }\n  \t}\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment CardBlockData on CardBlock {\n    Title\n    Description\n    Image {\n        Url\n        Expanded {\n            Name\n            Path: RelativePath\n        }\n    }\n    Button: Link {\n        ...LinkItemData\n    }\n}"): (typeof documents)["fragment CardBlockData on CardBlock {\n    Title\n    Description\n    Image {\n        Url\n        Expanded {\n            Name\n            Path: RelativePath\n        }\n    }\n    Button: Link {\n        ...LinkItemData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment CarouselBlockData on CarouselBlock {\n    CarouselSlides {\n        ...BlockContentAreaItemData\n    }\n    ShowArrows\n}"): (typeof documents)["fragment CarouselBlockData on CarouselBlock {\n    CarouselSlides {\n        ...BlockContentAreaItemData\n    }\n    ShowArrows\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContainerBlockData on ContainerBlock {\n    MainContainerArea {\n        ...BlockContentAreaItemData\n    }\n    Gap\n    Spacing\n    GridLayout\n    BackgroundColor\n}"): (typeof documents)["fragment ContainerBlockData on ContainerBlock {\n    MainContainerArea {\n        ...BlockContentAreaItemData\n    }\n    Gap\n    Spacing\n    GridLayout\n    BackgroundColor\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment HeroBlockData on HeroBlock\n{\n    Name\n    Background\n    BannerTitle\n    BannerText\n    CalloutOpacity\n    BannerLink {\n        ...LinkItemData\n    }\n}"): (typeof documents)["fragment HeroBlockData on HeroBlock\n{\n    Name\n    Background\n    BannerTitle\n    BannerText\n    CalloutOpacity\n    BannerLink {\n        ...LinkItemData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment HighlightBlockData on HighlightTextBlock\n{\n  Title\n  PayOffText\n}"): (typeof documents)["fragment HighlightBlockData on HighlightTextBlock\n{\n  Title\n  PayOffText\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ImageMediaData on Content {\n    RelativePath \n}"): (typeof documents)["fragment ImageMediaData on Content {\n    RelativePath \n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n}"): (typeof documents)["fragment OdpEmbedBlockData on OdpEmbedBlock {\n    ContentId\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getProductProps($code: String!, $locale: [Locales])\n{\n    product: Product(\n        where: { ProductCode: { eq: $code }}\n        locale: $locale\n    ) {\n        total\n        items {\n            code: ProductCode\n            properties: _children {\n                texts: ProductTextProperty {\n                    items {\n                        label: PropertyName\n                        value: PropertyValue\n                    }\n                }\n            }\n        }\n    }\n}"): (typeof documents)["query getProductProps($code: String!, $locale: [Locales])\n{\n    product: Product(\n        where: { ProductCode: { eq: $code }}\n        locale: $locale\n    ) {\n        total\n        items {\n            code: ProductCode\n            properties: _children {\n                texts: ProductTextProperty {\n                    items {\n                        label: PropertyName\n                        value: PropertyValue\n                    }\n                }\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ProductBlockData on Product {\n    ProductCode\n    ProductName\n    ProductTagLine\n    ShortDescription\n    MainImage {\n        ...ImageData\n    }\n}"): (typeof documents)["fragment ProductBlockData on Product {\n    ProductCode\n    ProductName\n    ProductTagLine\n    ShortDescription\n    MainImage {\n        ...ImageData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment QuoteData on QuoteBlock {\n    Text\n    Quotee\n    Role\n    QuoteeLocation\n    Photo {\n        ...ImageData\n    }\n}"): (typeof documents)["fragment QuoteData on QuoteBlock {\n    Text\n    Quotee\n    Role\n    QuoteeLocation\n    Photo {\n        ...ImageData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment TextBlockData on TextBlock {\n    Spacing\n    MainBody\n}"): (typeof documents)["fragment TextBlockData on TextBlock {\n    Spacing\n    MainBody\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getFooter($channelId: String!, $locale: [Locales!]) {\n    FooterConfigBlock (\n        where: { FooterChannelID: { eq: $channelId } }, \n        locale: $locale,\n        limit: 1\n    ) {\n        total\n        items {\n            logo: FooterLogo\n            text: FooterText\n            button: BrandButton { ...FooterLinkData }\n            firstLinks: FooterLinkGroup1 { ...FooterLinks }\n            secondLinks: FooterLinkGroup2 { ...FooterLinks }\n            thirdLinks: FooterLinkGroup3 { ...FooterLinks }\n            fourthLinks: FooterLinkGroup4 { ...FooterLinks }\n        }\n    }\n}"): (typeof documents)["query getFooter($channelId: String!, $locale: [Locales!]) {\n    FooterConfigBlock (\n        where: { FooterChannelID: { eq: $channelId } }, \n        locale: $locale,\n        limit: 1\n    ) {\n        total\n        items {\n            logo: FooterLogo\n            text: FooterText\n            button: BrandButton { ...FooterLinkData }\n            firstLinks: FooterLinkGroup1 { ...FooterLinks }\n            secondLinks: FooterLinkGroup2 { ...FooterLinks }\n            thirdLinks: FooterLinkGroup3 { ...FooterLinks }\n            fourthLinks: FooterLinkGroup4 { ...FooterLinks }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FooterLinks on FooterConfigBlockBlockData {\n    caption:LinkListCaption\n    items: LinkListItems { ...FooterLinkData }\n}"): (typeof documents)["fragment FooterLinks on FooterConfigBlockBlockData {\n    caption:LinkListCaption\n    items: LinkListItems { ...FooterLinkData }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment FooterLinkData on LinkItemNode {\n    href: Href\n    children: Text\n    title: Title\n    target: Target\n    content: ContentLink {\n        url: Url\n        data: Expanded {\n            path: RelativePath\n        }\n    }\n}"): (typeof documents)["fragment FooterLinkData on LinkItemNode {\n    href: Href\n    children: Text\n    title: Title\n    target: Target\n    content: ContentLink {\n        url: Url\n        data: Expanded {\n            path: RelativePath\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetHeaderData($siteId: String!, $locale: [Locales]) {\n    HeaderConfigBlock(where: { ChannelId: { eq: $siteId } }, locale: $locale) {\n        items {\n            Name\n            SiteLogo\n            ChannelId\n            CustomCSS\n            PromoText\n            NavMenuArea {\n            DisplayOption\n                ContentLink {\n                    Expanded {\n                        ...NavMenuItemData\n                    }\n                }\n            }\n        }\n      }\n}\n  \nfragment NavMenuItemData on NavMenuItem {\n    Name\n    Label\n    Links {\n        Href\n        Text\n        Title\n        Target\n        ContentLink {\n            Url\n            Language {\n                Name\n            }\n            Expanded {\n                RelativePath\n            }\n        }\n    }\n    MenuContent {\n        item: ContentLink {\n            id: Id\n            workId: WorkId\n            guidValue: GuidValue\n            data: Expanded {\n                contentType: ContentType\n                id: ContentLink {\n                    id: Id\n                    workId: WorkId\n                    guidValue: GuidValue\n                }\n                locale: Language {\n                    name: Name\n                }\n                path: RelativePath\n            }\n        }\n        displayOption: DisplayOption\n    }\n    lastLink: NavItemBottomLink {\n        href: Href\n        title: Title\n        target: Target\n        text: Text\n        item: ContentLink {\n            url: Url,\n            data: Expanded {\n                path: RelativePath\n            }\n        }\n    }\n}"): (typeof documents)["query GetHeaderData($siteId: String!, $locale: [Locales]) {\n    HeaderConfigBlock(where: { ChannelId: { eq: $siteId } }, locale: $locale) {\n        items {\n            Name\n            SiteLogo\n            ChannelId\n            CustomCSS\n            PromoText\n            NavMenuArea {\n            DisplayOption\n                ContentLink {\n                    Expanded {\n                        ...NavMenuItemData\n                    }\n                }\n            }\n        }\n      }\n}\n  \nfragment NavMenuItemData on NavMenuItem {\n    Name\n    Label\n    Links {\n        Href\n        Text\n        Title\n        Target\n        ContentLink {\n            Url\n            Language {\n                Name\n            }\n            Expanded {\n                RelativePath\n            }\n        }\n    }\n    MenuContent {\n        item: ContentLink {\n            id: Id\n            workId: WorkId\n            guidValue: GuidValue\n            data: Expanded {\n                contentType: ContentType\n                id: ContentLink {\n                    id: Id\n                    workId: WorkId\n                    guidValue: GuidValue\n                }\n                locale: Language {\n                    name: Name\n                }\n                path: RelativePath\n            }\n        }\n        displayOption: DisplayOption\n    }\n    lastLink: NavItemBottomLink {\n        href: Href\n        title: Title\n        target: Target\n        text: Text\n        item: ContentLink {\n            url: Url,\n            data: Expanded {\n                path: RelativePath\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ArticleListPageData on ArticleListPage {\n    Name\n    ArticleListTitle\n    ArticleListBody\n    ArticleListHero {\n        ...ContentAreaItemData\n    }\n}"): (typeof documents)["fragment ArticleListPageData on ArticleListPage {\n    Name\n    ArticleListTitle\n    ArticleListBody\n    ArticleListHero {\n        ...ContentAreaItemData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getArticleListMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getArticleListMetaData: ArticleListPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: SeoSettings {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}"): (typeof documents)["query getArticleListMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getArticleListMetaData: ArticleListPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: SeoSettings {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ArticlePageBlockData on ArticlePage\n{\n    href: RelativePath\n    name: Name\n    title: Title\n    author: ArticleAuthor\n    published: StartPublish\n    image: PageImage {\n        src: Url\n        data: Expanded {\n            alt: Name\n        }\n    }\n    meta: SeoSettings {\n        intro:MetaDescription\n    }\n}"): (typeof documents)["fragment ArticlePageBlockData on ArticlePage\n{\n    href: RelativePath\n    name: Name\n    title: Title\n    author: ArticleAuthor\n    published: StartPublish\n    image: PageImage {\n        src: Url\n        data: Expanded {\n            alt: Name\n        }\n    }\n    meta: SeoSettings {\n        intro:MetaDescription\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ArticlePageData on ArticlePage {\n    Title\n    MainBody\n    StartPublish\n    ArticleAuthor\n    PageImage {\n        ...ImageData\n    }\n    SeoSettings {\n        MetaDescription\n    }\n}"): (typeof documents)["fragment ArticlePageData on ArticlePage {\n    Title\n    MainBody\n    StartPublish\n    ArticleAuthor\n    PageImage {\n        ...ImageData\n    }\n    SeoSettings {\n        MetaDescription\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticlePageMetaData ($guid:String!, $locale: [Locales]!) {\n    ArticlePage (\n        where: { ContentLink: { GuidValue: { eq: $guid }}}\n        locale: $locale\n    ) {\n        items {\n            name: Name\n            title: Title\n            published: StartPublish\n            modified: Changed\n            expires: StopPublish\n            url: Url\n            locale:Language {\n                code:Name\n            }\n            alternateLocales: ExistingLanguages {\n                code: Name\n                url: Link\n            }\n            seo: SeoSettings {\n                metaTitle: MetaTitle\n                metaDescription: MetaDescription\n                type: GraphType\n                image: SharingImage {\n                    id: Id\n                    guidValue: GuidValue\n                    data: Expanded {\n                        url:Url\n                        path: RelativePath\n                    }\n                }\n            }\n        }\n    }\n}"): (typeof documents)["query GetArticlePageMetaData ($guid:String!, $locale: [Locales]!) {\n    ArticlePage (\n        where: { ContentLink: { GuidValue: { eq: $guid }}}\n        locale: $locale\n    ) {\n        items {\n            name: Name\n            title: Title\n            published: StartPublish\n            modified: Changed\n            expires: StopPublish\n            url: Url\n            locale:Language {\n                code:Name\n            }\n            alternateLocales: ExistingLanguages {\n                code: Name\n                url: Link\n            }\n            seo: SeoSettings {\n                metaTitle: MetaTitle\n                metaDescription: MetaDescription\n                type: GraphType\n                image: SharingImage {\n                    id: Id\n                    guidValue: GuidValue\n                    data: Expanded {\n                        url:Url\n                        path: RelativePath\n                    }\n                }\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LandingPageData on LandingPage {\n    TopContentArea {\n        ...ContentAreaItemData\n    }\n    MainContentArea {\n        ...ContentAreaItemData\n    }\n}"): (typeof documents)["fragment LandingPageData on LandingPage {\n    TopContentArea {\n        ...ContentAreaItemData\n    }\n    MainContentArea {\n        ...ContentAreaItemData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getLandingPageMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getLandingPageMetaData: LandingPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: LandingPageSeo {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}"): (typeof documents)["query getLandingPageMetaData($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    getLandingPageMetaData: LandingPage(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        count: total\n        pages: items {\n            name: Name\n            head: LandingPageSeo {\n                title: MetaTitle\n                description: MetaDescription\n                image: SharingImage {\n                    url: Url\n                    data: Expanded {\n                        url: Url\n                        path: RelativePath\n                    }\n                }\n                type: GraphType\n            }\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LocationListPageData on LocationListPage {\n    LocationListTitle\n    LocationsIntroduction\n    LocationsImage {\n        ...ImageDataSearch\n    }\n    LocationsTopArea {\n        ...ContentAreaItemData\n    }\n    LocationsMainContent {\n        ...ContentAreaItemData\n    }\n}"): (typeof documents)["fragment LocationListPageData on LocationListPage {\n    LocationListTitle\n    LocationsIntroduction\n    LocationsImage {\n        ...ImageDataSearch\n    }\n    LocationsTopArea {\n        ...ContentAreaItemData\n    }\n    LocationsMainContent {\n        ...ContentAreaItemData\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LocationPageData on LocationPage {\n    ParentLink {\n        Url\n        Expanded {\n            RelativePath\n        }\n    }\n    Name\n    LocationTitle\n    LocationServices\n    LocationStreet1\n    LocationStreet2\n    LocationPostalCode\n    LocationCity\n    LocationState\n    LocationCountry\n    LocationContinent\n    LocationPhone\n    LocationLatitude\n    LocationLongitude\n    LocationText\n    LocationImage {\n        ...ImageDataSearch\n    }\n}"): (typeof documents)["fragment LocationPageData on LocationPage {\n    ParentLink {\n        Url\n        Expanded {\n            RelativePath\n        }\n    }\n    Name\n    LocationTitle\n    LocationServices\n    LocationStreet1\n    LocationStreet2\n    LocationPostalCode\n    LocationCity\n    LocationState\n    LocationCountry\n    LocationContinent\n    LocationPhone\n    LocationLatitude\n    LocationLongitude\n    LocationText\n    LocationImage {\n        ...ImageDataSearch\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetArticles($parent: String!, $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: ArticlePage(\n      where: {\n        _and: [\n          { ParentLink: { GuidValue: { eq: $parent } } }\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Title\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: PageImage {\n          url: Url\n          data: Expanded {\n            url: Url\n            path: RelativePath\n          }\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }"): (typeof documents)["query GetArticles($parent: String!, $pageSize: Int! = 10, $start: Int! = 0, $locale: [Locales], $author: [String!], $published: Date, $publishedEnd: Date) {\n    getArticles: ArticlePage(\n      where: {\n        _and: [\n          { ParentLink: { GuidValue: { eq: $parent } } }\n          {\n            _and: [\n              { StartPublish: { gte: $published } }\n              { StartPublish: { lte: $publishedEnd } }\n            ]\n          }\n        ]\n      }\n      locale: $locale\n      limit: $pageSize\n      skip: $start\n      orderBy: { StartPublish: DESC }\n    ) {\n      total\n      items {\n        id: ContentLink {\n          guid: GuidValue\n        }\n        name: Name\n        title: Title\n        description: SeoSettings {\n          text: MetaDescription\n        }\n        url: Url\n        path: RelativePath\n        author: ArticleAuthor\n        published: StartPublish\n        image: PageImage {\n          url: Url\n          data: Expanded {\n            url: Url\n            path: RelativePath\n          }\n        }\n      }\n      facets {\n        author: ArticleAuthor(orderType: VALUE, orderBy: ASC, filters: $author) {\n          count\n          name\n        }\n        published: StartPublish(unit: DAY) {\n          count\n          name\n        }\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LocationTopContent on LocationPage {\n    isTopContent: LocationTopItem\n}"): (typeof documents)["fragment LocationTopContent on LocationPage {\n    isTopContent: LocationTopItem\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LocationGeoLocation on LocationPage {\n    lon: LocationLongitude\n    lat: LocationLatitude\n}"): (typeof documents)["fragment LocationGeoLocation on LocationPage {\n    lon: LocationLongitude\n    lat: LocationLatitude\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getLocationsList($parentId:String!, $locale: [Locales], $withGeoLocation: Boolean! = false, $withTopContent: Boolean! = false, $orderBy: LocationPageOrderByInput, $continents: [String!], $services: [String!]) {\n    getLocationsList: LocationPage (\n        where: {\n            ParentLink: { GuidValue: { eq: $parentId }}\n        }\n        locale: $locale\n        orderBy: $orderBy\n    ) {\n        facets {\n            continent: LocationContinent(orderType: VALUE, orderBy: ASC, filters: $continents) {\n                name\n                count\n            },\n            services: LocationServices(orderType: VALUE, orderBy: ASC, filters: $services) {\n                name\n                count\n            }\n        }\n        items {\n            id: ContentLink {\n                id: Id\n                guid:GuidValue\n            }\n            path: RelativePath\n            slug: RouteSegment\n            title: LocationTitle\n            street1: LocationStreet1\n            street2: LocationStreet2\n            city: LocationCity\n            postalCode: LocationPostalCode\n            state: LocationState\n            country: LocationCountry\n            continent: LocationContinent\n            services: LocationServices\n            ...LocationGeoLocation @include(if:$withGeoLocation)\n            ...LocationTopContent @include(if:$withTopContent)\n        }\n    }\n}"): (typeof documents)["query getLocationsList($parentId:String!, $locale: [Locales], $withGeoLocation: Boolean! = false, $withTopContent: Boolean! = false, $orderBy: LocationPageOrderByInput, $continents: [String!], $services: [String!]) {\n    getLocationsList: LocationPage (\n        where: {\n            ParentLink: { GuidValue: { eq: $parentId }}\n        }\n        locale: $locale\n        orderBy: $orderBy\n    ) {\n        facets {\n            continent: LocationContinent(orderType: VALUE, orderBy: ASC, filters: $continents) {\n                name\n                count\n            },\n            services: LocationServices(orderType: VALUE, orderBy: ASC, filters: $services) {\n                name\n                count\n            }\n        }\n        items {\n            id: ContentLink {\n                id: Id\n                guid:GuidValue\n            }\n            path: RelativePath\n            slug: RouteSegment\n            title: LocationTitle\n            street1: LocationStreet1\n            street2: LocationStreet2\n            city: LocationCity\n            postalCode: LocationPostalCode\n            state: LocationState\n            country: LocationCountry\n            continent: LocationContinent\n            services: LocationServices\n            ...LocationGeoLocation @include(if:$withGeoLocation)\n            ...LocationTopContent @include(if:$withTopContent)\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"): (typeof documents)["fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"): (typeof documents)["fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }"): (typeof documents)["fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }"): (typeof documents)["fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlockContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"): (typeof documents)["fragment BlockContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment LinkItemData on LinkItemNode {\n      children: Text\n      title: Title\n      href: Href\n      target: Target\n      content: ContentLink {\n        href: Url\n        data: Expanded {\n          path: RelativePath\n        }\n      }\n    }"): (typeof documents)["fragment LinkItemData on LinkItemNode {\n      children: Text\n      title: Title\n      href: Href\n      target: Target\n      content: ContentLink {\n        href: Url\n        data: Expanded {\n          path: RelativePath\n        }\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"): (typeof documents)["fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"): (typeof documents)["fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlockData on IContent {\n        ...IContentData\n    }"): (typeof documents)["fragment BlockData on IContent {\n        ...IContentData\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment PageData on IContent {\n        ...IContentData\n    }"): (typeof documents)["fragment PageData on IContent {\n        ...IContentData\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }"): (typeof documents)["fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}"): (typeof documents)["query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}"): (typeof documents)["query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}"): (typeof documents)["query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}"): (typeof documents)["query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"): (typeof documents)["query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"): (typeof documents)["query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;