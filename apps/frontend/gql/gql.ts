/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n": types.FooterNavigationNewDocument,
    "\n  query Navigations($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n  }\n": types.NavigationsDocument,
    "\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n": types.StartPageDataFragmentDoc,
    "\n  query getStartPageMetaData(\n    $id: Int\n    $workId: Int\n    $guidValue: String\n    $locale: [Locales!]\n    $isCommonDraft: Boolean\n  ) {\n    getStartPagedata: StartPage(\n      where: {\n        ContentLink: {\n          Id: { eq: $id }\n          WorkId: { eq: $workId }\n          GuidValue: { eq: $guidValue }\n        }\n        IsCommonDraft: { eq: $isCommonDraft }\n      }\n      locale: $locale\n    ) {\n      count: total\n      items {\n        name: Name\n      }\n    }\n  }\n": types.GetStartPageMetaDataDocument,
    "query getContentByPathBase($path: String!, $locale: [Locales], $siteId: String) {\n    Content(\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}": types.GetContentByPathBaseDocument,
    "query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}": types.GetGenericMetaDataDocument,
    "query getContentByIdBase($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { Id: { eq: $id }, WorkId: { eq: $workId }, GuidValue: { eq: $guidValue } }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}": types.GetContentByIdBaseDocument,
    "fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }": types.ContentLinkFragmentDoc,
    "fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }": types.ContentLinkSearchFragmentDoc,
    "fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }": types.IContentDataFragmentDoc,
    "fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }": types.ContentAreaItemDataFragmentDoc,
    "fragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }": types.BlockContentAreaItemSearchDataFragmentDoc,
    "fragment BlockContentAreaItemData on ContentAreaItemModel {\n        item: ContentLink {\n            ...ContentLink\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }": types.BlockContentAreaItemDataFragmentDoc,
    "fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }": types.ImageDataFragmentDoc,
    "fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }": types.ImageDataSearchFragmentDoc,
    "fragment BlockData on IContent {\n        ...IContentData\n    }": types.BlockDataFragmentDoc,
    "fragment PageData on IContent {\n        ...IContentData\n    }": types.PageDataFragmentDoc,
    "fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }": types.ContentAreaItemBaseFragmentDoc,
    "query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}": types.GetContentByIdDocument,
    "query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}": types.GetContentByPathDocument,
    "query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}": types.GetContentTypeDocument,
    "query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetAllChannelsDocument,
    "query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetChannelByIdDocument,
    "query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }": types.GetChannelByDomainDocument,
    "query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}": types.GetAllRoutesDocument,
    "query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }": types.GetRouteByPathDocument,
    "query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }": types.GetRouteByIdDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n"): (typeof documents)["\n  query FooterNavigationNew($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        footerSubLinks: FooterNavigationSubLinks {\n          url: Href\n          text: Text\n        }\n        footerCopyright: FooterNavigationCopyrightText\n        footerNavigation: FooterNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...FooterNavigationBlock\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment FooterNavigationBlock on IContent {\n    ...FooterMenuNavigationItem\n    ...HtmlBlock\n  }\n\n  fragment HtmlBlock on HtmlBlock {\n    title: HtmlBlockHeading\n    content: HtmlContent\n  }\n\n  fragment FooterMenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Navigations($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n  }\n"): (typeof documents)["\n  query Navigations($locale: [Locales] = en) {\n    menuItems: StartPage(locale: $locale) {\n      items {\n        headerNavigation: MainNavigationContentArea {\n          contentLink: ContentLink {\n            navigationItem: Expanded {\n              ...MegaMenuItem\n            }\n          }\n        }\n        UtilityNavigationContentArea {\n          ContentLink {\n            navigationItem: Expanded {\n              ...Block\n            }\n          }\n        }\n      }\n    }\n  }\n\n  fragment MegaMenuItem on MegaMenuGroupBlock {\n    menuName: MenuMenuHeading\n    menuData: MegaMenuContentArea {\n      contentLink: ContentLink {\n        menuList: Expanded {\n          ...Block\n        }\n      }\n    }\n  }\n\n  fragment Block on IContent {\n    ...MenuNavigationItem\n    ...CardItem\n    ...Button\n  }\n\n  fragment Button on ButtonBlock {\n    text: ButtonText\n    url: ButtonUrl\n    type: ButtonType\n    variant: ButtonVariant\n  }\n\n  fragment MenuNavigationItem on MenuNavigationBlock {\n    title: MenuNavigationHeading\n    items: NavigationLinks {\n      url: Href\n      title: Title\n      target: Target\n      text: Text\n    }\n  }\n\n  fragment CardItem on CardBlock {\n    heading: CardHeading\n    subheading: CardSubHeading\n    description: CardDescription\n    color: CardColor\n    image: CardImage {\n      src: Url\n    }\n    link: CardButton {\n      title: ButtonText\n      url: ButtonUrl\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"): (typeof documents)["\n  fragment StartPageData on StartPage {\n    HomePageHeroContentArea {\n      ...ContentAreaItemData\n    }\n    HomePageMainContentArea {\n      ...ContentAreaItemData\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getStartPageMetaData(\n    $id: Int\n    $workId: Int\n    $guidValue: String\n    $locale: [Locales!]\n    $isCommonDraft: Boolean\n  ) {\n    getStartPagedata: StartPage(\n      where: {\n        ContentLink: {\n          Id: { eq: $id }\n          WorkId: { eq: $workId }\n          GuidValue: { eq: $guidValue }\n        }\n        IsCommonDraft: { eq: $isCommonDraft }\n      }\n      locale: $locale\n    ) {\n      count: total\n      items {\n        name: Name\n      }\n    }\n  }\n"): (typeof documents)["\n  query getStartPageMetaData(\n    $id: Int\n    $workId: Int\n    $guidValue: String\n    $locale: [Locales!]\n    $isCommonDraft: Boolean\n  ) {\n    getStartPagedata: StartPage(\n      where: {\n        ContentLink: {\n          Id: { eq: $id }\n          WorkId: { eq: $workId }\n          GuidValue: { eq: $guidValue }\n        }\n        IsCommonDraft: { eq: $isCommonDraft }\n      }\n      locale: $locale\n    ) {\n      count: total\n      items {\n        name: Name\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentByPathBase($path: String!, $locale: [Locales], $siteId: String) {\n    Content(\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}"): (typeof documents)["query getContentByPathBase($path: String!, $locale: [Locales], $siteId: String) {\n    Content(\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}"): (typeof documents)["query getGenericMetaData($path: String!, $locale: [Locales], $siteId: String) {\n    getGenericMetaData: Content (\n        where: { RelativePath: { eq: $path }, SiteId: { eq: $siteId } }\n        locale: $locale\n    ) {\n        items {\n            name: Name,\n            alternatives: ExistingLanguages {\n                locale: Name\n                href: Link\n            }\n            canonical: Url\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentByIdBase($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { Id: { eq: $id }, WorkId: { eq: $workId }, GuidValue: { eq: $guidValue } }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}"): (typeof documents)["query getContentByIdBase($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { Id: { eq: $id }, WorkId: { eq: $workId }, GuidValue: { eq: $guidValue } }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            contentType: ContentType\n            id: ContentLink {\n                id: Id\n                workId: WorkId\n                guidValue: GuidValue\n            }\n            locale: Language {\n                name: Name\n            }\n            path: RelativePath\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"): (typeof documents)["fragment ContentLink on ContentModelReference {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"): (typeof documents)["fragment ContentLinkSearch on ContentModelReferenceSearch {\n      id: Id,\n      workId: WorkId,\n      guidValue: GuidValue\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }"): (typeof documents)["fragment IContentData on IContent {\n        contentType: ContentType\n        id: ContentLink {\n          ...ContentLink\n        }\n        locale: Language {\n            name: Name\n        }\n        path:RelativePath\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }"): (typeof documents)["fragment ContentAreaItemData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...BlockData\n            }\n        }\n        displayOption:DisplayOption\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"): (typeof documents)["fragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch {\n        item: ContentLink {\n            ...ContentLinkSearch\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlockContentAreaItemData on ContentAreaItemModel {\n        item: ContentLink {\n            ...ContentLink\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"): (typeof documents)["fragment BlockContentAreaItemData on ContentAreaItemModel {\n        item: ContentLink {\n            ...ContentLink\n            data: Expanded {\n            ...IContentData\n            }\n        }\n        displayOption:DisplayOption\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"): (typeof documents)["fragment ImageData on ContentModelReference {\n      ...ContentLink\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"): (typeof documents)["fragment ImageDataSearch on ContentModelReferenceSearch {\n      ...ContentLinkSearch\n      url: Url\n      data: Expanded {\n        ...IContentData\n        url: Url\n        alt: Name \n        path: RelativePath\n      }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment BlockData on IContent {\n        ...IContentData\n    }"): (typeof documents)["fragment BlockData on IContent {\n        ...IContentData\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment PageData on IContent {\n        ...IContentData\n    }"): (typeof documents)["fragment PageData on IContent {\n        ...IContentData\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }"): (typeof documents)["fragment ContentAreaItemBase on ContentAreaItemModelSearch {\n      contentLink:ContentLink { \n          id:Id\n          workId:WorkId\n          guidValue:GuidValue\n          component:Expanded {\n              path:RelativePath\n              type:ContentType\n          }\n      }\n      displayOption:DisplayOption\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}"): (typeof documents)["query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) {\n    Content(\n        where: {\n            ContentLink: { \n                Id: { eq: $id }, \n                WorkId: { eq: $workId }, \n                GuidValue: { eq: $guidValue } \n            }\n            IsCommonDraft: { eq: $isCommonDraft }\n        }\n        locale: $locale\n    ) {\n        total\n        items {\n            ...PageData\n            ...BlockData\n        }\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}"): (typeof documents)["query getContentByPath($path: String!, $locale: [Locales], $siteId: String)\n{\n  Content(\n    where: {\n      RelativePath: {\n        eq: $path\n      }\n      SiteId: {\n        eq: $siteId\n      }\n  \t},\n    locale: $locale\n  ) {\n    items {\n      ...PageData\n    }\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}"): (typeof documents)["query getContentType($id: Int, $workId: Int, $guidValue: String, $locale: [Locales])\n{\n  Content(\n    where: {\n      ContentLink: {\n        GuidValue: {\n          eq: $guidValue\n        }\n        Id: {\n          eq: $id\n        },\n        WorkId: {\n          eq: $workId\n        }\n      }\n    },\n    locale: $locale\n    limit: 1\n  ) {\n    items {\n    \tContentType\n    },\n    total\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetAllChannels {\n        GetAllChannels:SiteDefinition {\n            channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetChannelById($id: String!) {\n        GetChannelById:SiteDefinition (\n            where: {\n                Id: { eq: $id }\n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"): (typeof documents)["query GetChannelByDomain($domain: String!, $fallback: String! = \"___\") {\n        GetChannelByDomain:SiteDefinition (\n            where: {\n                _or: [\n                    {Hosts: { Name: { eq: $domain }}},\n                    {Hosts: { Name: { eq: $fallback }}}\n                ]  \n            }\n            limit: 1\n        ) {\n          channels: items {\n                id: Id\n                name: Name,\n                domains: Hosts {\n                    name: Name\n                    type: Type\n                    forLocale: Language {\n                        code: Name\n                    }\n                }\n                locales:Languages {\n                    code:Name\n                    slug:UrlSegment\n                    isDefault:IsMasterLanguage\n                }\n                content: ContentRoots {\n                    startPage: StartPage {\n                        id:Id,\n                        guidValue:GuidValue\n                    }\n                }\n            }\n        }\n    }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}"): (typeof documents)["query GetAllRoutes($cursor: String, $pageSize: Int = 100, $typeFilter: [String] = \"Page\", $siteId: String = null)\n  {\n    Content(\n        where: {\n        _and: {\n            RelativePath: {\n            exist: true\n            },\n            ContentType: {\n            in: $typeFilter\n            }\n            SiteId: {\n            eq: $siteId\n            }\n        }\n        },\n        limit: $pageSize,\n        cursor: $cursor\n    ) {\n        items {\n        path: RelativePath\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name\n        contentType: ContentType\n        slug: RouteSegment\n        changed: Changed\n        published: StartPublish\n        siteId: SiteId\n        url: Url\n        },\n        cursor,\n        total\n    }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"): (typeof documents)["query GetRouteByPath($path: String!, $siteId: String) {\n    Content(\n      where: {\n        _and: {\n          RelativePath: {\n            eq: $path\n          },\n          SiteId: {\n            eq:$siteId\n          }\n        }\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"): (typeof documents)["query GetRouteById($id: Int!, $workId: Int, $locale: [Locales]!) {\n    Content(\n      where: {\n        ContentLink: {\n          Id: {\n            eq: $id\n          }\n          WorkId: {\n            eq: $workId\n          }\n        }\n      },\n      locale: $locale\n      limit: 1,\n      orderBy: {\n        ContentLink: {\n            WorkId: DESC\n        }\n        Status: ASC\n      }\n    )\n    {\n      total,\n      items {\n        route: RelativePath\n        url: Url\n        locale:Language { name: Name }\n        contentLink: ContentLink { id: Id, workId: WorkId, guidValue: GuidValue }\n        name: Name,\n        contentType: ContentType,\n        slug: RouteSegment,\n        changed: Changed,\n        published: StartPublish\n        siteId: SiteId\n      }\n    }\n  }"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;