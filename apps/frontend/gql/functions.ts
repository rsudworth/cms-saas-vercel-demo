import "server-only"
import type * as Types from './graphql'
import { gql as parse, type ApolloClient, type NormalizedCacheObject } from '@apollo/client'


export async function getContentByPath(client: ApolloClient<NormalizedCacheObject>, variables: Types.GetContentByPathQueryVariables) : Promise<Types.GetContentByPathQuery>
{
  const query = `query getContentByPath($path: String!, $locale: [Locales], $siteId: String) { Content( where: {RelativePath: {eq: $path}, SiteId: {eq: $siteId}} locale: $locale ) { items { ...PageData } } } fragment PageData on IContent { ...IContentData ...BlogPostPageData ...LandingPageData ...StandardPageData ...StartPageData } fragment BlogPostPageData on BlogPostPage { Name title: Heading subtitle: ArticleSubHeading image: BlogPostPromoImage { src: Url } description: BlogPostBody publish: StartPublish author: ArticleAuthor } fragment LandingPageData on LandingPage { TopContentArea { ...ContentAreaItemData } MainContentArea { ...ContentAreaItemData } } fragment StandardPageData on StandardPage { Name title: StandardPageHeading subtitle: StandardSubHeading image: StandardPromoImage { src: Url } description: MainBody } fragment StartPageData on StartPage { HomePageHeroContentArea { ...ContentAreaItemData } HomePageMainContentArea { ...ContentAreaItemData } } fragment IContentData on IContent { contentType: ContentType id: ContentLink { ...ContentLink } locale: Language { name: Name } path: RelativePath } fragment ContentAreaItemData on ContentAreaItemModelSearch { item: ContentLink { ...ContentLinkSearch data: Expanded { ...BlockData } } displayOption: DisplayOption } fragment ContentLinkSearch on ContentModelReferenceSearch { id: Id workId: WorkId guidValue: GuidValue } fragment BlockData on IContent { ...IContentData ...BlogListingBlockData ...CardBlockData ...CarouselBlockData ...LayoutContainerBlockData ...HomeHeroBlockData ...HeroBlockData ...OdpEmbedBlockData ...QuoteBlockData ...TextBlockData ...BlogListingBlockData ...CardBlockData ...CarouselBlockData ...LayoutContainerBlockData ...HomeHeroBlockData ...HeroBlockData ...OdpEmbedBlockData ...QuoteBlockData ...TextBlockData } fragment BlogListingBlockData on BlogListingBlock { Name showFilters: BlogListingShowFilters selectedPageSize: BlogListingItemCount } fragment CardBlockData on CardBlock { Name button: CardButton { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } color: CardColor description: CardDescription heading: CardHeading icon: CardIcon { src: Url } image: CardImage { src: Url } subheading: CardSubHeading imageLayout: ImageLayout } fragment CarouselBlockData on CarouselBlock { CarouselItemsContentArea { ...BlockContentAreaItemSearchData } } fragment LayoutContainerBlockData on LayoutContainerBlock { Name columns: ColumnsCount color: ContainerBackgroundColor backgroundImage: ContainerBackgroundImage { url: Url } marginBottom: ContainerMarginBottom marginTop: ContainerMarginTop paddingBottom: ContainerPaddingBottom paddingTop: ContainerPaddingTop gap: GapSize LayoutContentArea { item: ContentLink { ...ContentLinkSearch data: Expanded { ...IContentData } } displayOption: DisplayOption } } fragment HomeHeroBlockData on HomePageHeroBlock { Name heading: HomeHeroBlockHeading subheading: HomeHeroBlockSubHeading button: HomeHeroButtonBlock { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } leftImage: HomeHeroLeftImage { url: Url GuidValue Id } rightImage: HomeHeroRightImage { url: Url GuidValue Id } } fragment HeroBlockData on HeroBlock { Name heading: Heading subheading: SubHeading button: HeroButton { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } color: HeroColor description: Description eyebrow: Eyebrow image: HeroImage { src: Url GuidValue Id } } fragment OdpEmbedBlockData on OdpEmbedBlock { ContentId } fragment QuoteBlockData on QuoteBlock { quote: QuoteText color: QuoteColor active: QuoteActive name: QuoteProfileName profilePicture: QuoteProfilePicture { url: Url } location: QuoteProfileLocation } fragment TextBlockData on TextBlock { Name overline: TextBlockOverline headingSize: TextBlockHeadingSize heading: TextBlockHeading description: TextBlockDescription center: TextCenter width: TextBlockWidth className: TextClassName } fragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch { item: ContentLink { ...ContentLinkSearch data: Expanded { ...IContentData } } displayOption: DisplayOption } fragment ContentLink on ContentModelReference { id: Id workId: WorkId guidValue: GuidValue }`
  const result = await client.query({ query: parse(query), variables })
  if (result.error) throw result.error
  return result.data
}

export async function getContentById(client: ApolloClient<NormalizedCacheObject>, variables: Types.GetContentByIdQueryVariables) : Promise<Types.GetContentByIdQuery>
{
  const query = `query getContentById($id: Int, $workId: Int, $guidValue: String, $locale: [Locales!], $isCommonDraft: Boolean) { Content( where: {ContentLink: {Id: {eq: $id}, WorkId: {eq: $workId}, GuidValue: {eq: $guidValue}}, IsCommonDraft: {eq: $isCommonDraft}} locale: $locale ) { total items { ...PageData ...BlockData } } } fragment BlockData on IContent { ...IContentData ...BlogListingBlockData ...CardBlockData ...CarouselBlockData ...LayoutContainerBlockData ...HomeHeroBlockData ...HeroBlockData ...OdpEmbedBlockData ...QuoteBlockData ...TextBlockData ...BlogListingBlockData ...CardBlockData ...CarouselBlockData ...LayoutContainerBlockData ...HomeHeroBlockData ...HeroBlockData ...OdpEmbedBlockData ...QuoteBlockData ...TextBlockData } fragment PageData on IContent { ...IContentData ...BlogPostPageData ...LandingPageData ...StandardPageData ...StartPageData } fragment BlogListingBlockData on BlogListingBlock { Name showFilters: BlogListingShowFilters selectedPageSize: BlogListingItemCount } fragment CardBlockData on CardBlock { Name button: CardButton { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } color: CardColor description: CardDescription heading: CardHeading icon: CardIcon { src: Url } image: CardImage { src: Url } subheading: CardSubHeading imageLayout: ImageLayout } fragment CarouselBlockData on CarouselBlock { CarouselItemsContentArea { ...BlockContentAreaItemSearchData } } fragment LayoutContainerBlockData on LayoutContainerBlock { Name columns: ColumnsCount color: ContainerBackgroundColor backgroundImage: ContainerBackgroundImage { url: Url } marginBottom: ContainerMarginBottom marginTop: ContainerMarginTop paddingBottom: ContainerPaddingBottom paddingTop: ContainerPaddingTop gap: GapSize LayoutContentArea { item: ContentLink { ...ContentLinkSearch data: Expanded { ...IContentData } } displayOption: DisplayOption } } fragment HomeHeroBlockData on HomePageHeroBlock { Name heading: HomeHeroBlockHeading subheading: HomeHeroBlockSubHeading button: HomeHeroButtonBlock { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } leftImage: HomeHeroLeftImage { url: Url GuidValue Id } rightImage: HomeHeroRightImage { url: Url GuidValue Id } } fragment HeroBlockData on HeroBlock { Name heading: Heading subheading: SubHeading button: HeroButton { className: ButtonClass children: ButtonText buttonType: ButtonType url: ButtonUrl buttonVariant: ButtonVariant } color: HeroColor description: Description eyebrow: Eyebrow image: HeroImage { src: Url GuidValue Id } } fragment OdpEmbedBlockData on OdpEmbedBlock { ContentId } fragment QuoteBlockData on QuoteBlock { quote: QuoteText color: QuoteColor active: QuoteActive name: QuoteProfileName profilePicture: QuoteProfilePicture { url: Url } location: QuoteProfileLocation } fragment TextBlockData on TextBlock { Name overline: TextBlockOverline headingSize: TextBlockHeadingSize heading: TextBlockHeading description: TextBlockDescription center: TextCenter width: TextBlockWidth className: TextClassName } fragment IContentData on IContent { contentType: ContentType id: ContentLink { ...ContentLink } locale: Language { name: Name } path: RelativePath } fragment BlockContentAreaItemSearchData on ContentAreaItemModelSearch { item: ContentLink { ...ContentLinkSearch data: Expanded { ...IContentData } } displayOption: DisplayOption } fragment ContentLinkSearch on ContentModelReferenceSearch { id: Id workId: WorkId guidValue: GuidValue } fragment ContentLink on ContentModelReference { id: Id workId: WorkId guidValue: GuidValue } fragment BlogPostPageData on BlogPostPage { Name title: Heading subtitle: ArticleSubHeading image: BlogPostPromoImage { src: Url } description: BlogPostBody publish: StartPublish author: ArticleAuthor } fragment LandingPageData on LandingPage { TopContentArea { ...ContentAreaItemData } MainContentArea { ...ContentAreaItemData } } fragment StandardPageData on StandardPage { Name title: StandardPageHeading subtitle: StandardSubHeading image: StandardPromoImage { src: Url } description: MainBody } fragment StartPageData on StartPage { HomePageHeroContentArea { ...ContentAreaItemData } HomePageMainContentArea { ...ContentAreaItemData } } fragment ContentAreaItemData on ContentAreaItemModelSearch { item: ContentLink { ...ContentLinkSearch data: Expanded { ...BlockData } } displayOption: DisplayOption }`
  const result = await client.query({ query: parse(query), variables })
  if (result.error) throw result.error
  return result.data
}